---
# yaml-language-server: $schema=https://raw.githubusercontent.com/k3d-io/k3d/main/pkg/config/v1alpha5/schema.json
# https://k3d.io/usage/configfile/
# curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="server --disable=traefik,servicelb,local-storage,metrics-server --kubelet-arg=eviction-hard=imagefs.available<1%,nodefs.available<1% --kube-proxy-arg=conntrack-max-per-core=0" K3S_TOKEN=$CLUSTER_SECRET K3S_KUBECONFIG_MODE=644 sh -s -
apiVersion: k3d.io/v1alpha5
kind: Simple
metadata:
  name: ${CLUSTER_NAME}
servers: 1
agents: 2
kubeAPI:
  host: ${CURRENT_IP}
  hostIP: 0.0.0.0
  hostPort: "6443"
image: rancher/k3s:${K3S_VERSION}
# subnet: "10.200.0.0/16"
network: k3d-${CLUSTER_NAME}
volumes:
  - volume: ${SHARED_PATH}:/mnt/shared
    nodeFilters:
      - all
  - volume: ${SHARED_PATH}/default-local-pv:/opt/local-path-provisioner
    nodeFilters:
      - all
ports:
  # https://ranchermanager.docs.rancher.com/reference-guides/cluster-configuration/rancher-server-configuration/k3s-cluster-configuration#nodeport-service-port-range
  # - port: ${CURRENT_IP}:32600-32767:32600-32767 # a range of k3s nodeports exposed on host https://docs.k3s.io/cli/server#networking
  #   nodeFilters:
  #   - loadbalancer
  - port: 0.0.0.0:3080:30080
    nodeFilters:
      - loadbalancer
  - port: 0.0.0.0:3443:30443
    nodeFilters:
      - loadbalancer
options:
  k3d:
    wait: true
    timeout: 1m30s
    disableLoadbalancer: false
    disableImageVolume: false
    disableRollback: false
    loadbalancer:
      configOverrides:
        - settings.workerConnections=2048
  k3s:
    extraArgs:
      - arg: --disable=traefik,servicelb,local-storage,metrics-server
        nodeFilters:
          - server:*
      - arg: --tls-san=${CURRENT_IP}
        nodeFilters:
          - server:*
      - arg: --tls-san=${CURRENT_EXTERNAL_IP}
        nodeFilters:
          - server:*
      - arg: --tls-san=dxas90.duckdns.org
        nodeFilters:
          - server:*
      - arg: --kubelet-arg=eviction-hard=imagefs.available<1%,nodefs.available<1%
        nodeFilters:
          - agent:*
      - arg: --kubelet-arg=eviction-minimum-reclaim=imagefs.available=1%,nodefs.available=1%
        nodeFilters:
          - agent:*
      - arg: --kube-proxy-arg=conntrack-max-per-core=0
        nodeFilters:
          - agent:*
          - server:*
      - arg: "--kube-apiserver-arg=oidc-issuer-url=https://id.5rv.me"
        nodeFilters:
          - server:*
      - arg: "--kube-apiserver-arg=oidc-client-id=6c2cc681-161f-4af2-ba2f-ec5091f7eec4"
        nodeFilters:
          - server:*
      - arg: "--kube-apiserver-arg=oidc-username-claim=sub"
        nodeFilters:
          - server:*
      - arg: "--kube-apiserver-arg=oidc-username-prefix=idp:"
        nodeFilters:
          - server:*
      - arg: "--kube-apiserver-arg=oidc-groups-claim=groups"
        nodeFilters:
          - server:*
      - arg: "--kube-apiserver-arg=oidc-groups-prefix=idp-groups:"
        nodeFilters:
          - server:*
    nodeLabels:
      - label: nerdctl/bypass4netns=true
        nodeFilters:
          - all
  kubeconfig:
    updateDefaultKubeconfig: true
    switchCurrentContext: true
  runtime:
    labels:
      - label: my.k3s.cluster=true
        nodeFilters:
          - all
      - label: nerdctl/bypass4netns=true
        nodeFilters:
          - all
env:
  - envVar: SHARED_PATH=${SHARED_PATH}
    nodeFilters:
      - all
  - envVar: K3S_RESOLV_CONFIG=1.1.1.1
    nodeFilters:
      - all
