---
apiVersion: v1
kind: ConfigMap
metadata:
  name: valkey-cluster
  namespace: infrastructure
  labels:
    app.kubernetes.io/name: valkey-cluster
    app.kubernetes.io/instance: valkey-cluster
data:
  update-node.sh: |
    #!/bin/sh
    set -eu
    VALKEY_NODES="/data/nodes.conf"
    if [ -f "${VALKEY_NODES}" ]; then
      sed -i -e "/myself/ s/[0-9]\{1,3\}\(\.[0-9]\{1,3\}\)\{3\}/${POD_IP}/" "${VALKEY_NODES}"
    fi
    exec "$@"
  valkey.conf: |
    cluster-enabled yes
    cluster-require-full-coverage no
    cluster-node-timeout 15000
    cluster-config-file /data/nodes.conf
    cluster-migration-barrier 1
    appendonly yes
    protected-mode no
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: valkey-cluster
  namespace: infrastructure
  labels:
    app.kubernetes.io/name: valkey-cluster
    app.kubernetes.io/instance: valkey-cluster
spec:
  serviceName: valkey-cluster
  replicas: 6
  selector:
    matchLabels:
      app.kubernetes.io/name: valkey-cluster
      app.kubernetes.io/instance: valkey-cluster
  template:
    metadata:
      labels:
        app.kubernetes.io/name: valkey-cluster
        app.kubernetes.io/instance: valkey-cluster
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - valkey-cluster
              topologyKey: kubernetes.io/hostname
            weight: 1
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: valkey
          image: valkey/valkey:8-alpine
          ports:
            - containerPort: 6379
              name: client
            - containerPort: 16379
              name: gossip
          command: ["/conf/update-node.sh", "valkey-server", "/conf/valkey.conf"]
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: conf
              mountPath: /conf
            - name: data
              mountPath: /data
          readinessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 3
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
      volumes:
        - name: conf
          configMap:
            name: valkey-cluster
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 512Mi
---
apiVersion: v1
kind: Service
metadata:
  name: valkey-cluster
  namespace: infrastructure
  labels:
    app.kubernetes.io/name: valkey-cluster
    app.kubernetes.io/instance: valkey-cluster
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
      name: client
    - port: 16379
      targetPort: 16379
      name: gossip
  selector:
    app: valkey-cluster
---
apiVersion: batch/v1
kind: Job
metadata:
  name: valkey-cluster-init
  namespace: infrastructure
spec:
  ttlSecondsAfterFinished: 300
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: valkey-cluster-init
        image: valkey/valkey:8-alpine
        command:
        - sh
        - -c
        - |
          echo "Waiting for 6 valkey pods to become ready..."
          for i in $(seq 1 30); do
            if getent hosts valkey-cluster-0.valkey-cluster.infrastructure.svc.cluster.local >/dev/null 2>&1 && \
              getent hosts valkey-cluster-5.valkey-cluster.infrastructure.svc.cluster.local >/dev/null 2>&1; then
              READY="ready"
            else
              READY="notready"
            fi
            if [ "$READY" = "ready" ]; then
              break
            fi
            echo "[$i] Not ready yet, sleeping..."
            sleep 5
          done

          echo "Creating valkey cluster..."
          valkey-cli --cluster create --cluster-yes --cluster-replicas 1 \
            $(getent hosts valkey-cluster-0.valkey-cluster.infrastructure.svc.cluster.local | awk '{print $1 ":6379"}') \
            $(getent hosts valkey-cluster-1.valkey-cluster.infrastructure.svc.cluster.local | awk '{print $1 ":6379"}') \
            $(getent hosts valkey-cluster-2.valkey-cluster.infrastructure.svc.cluster.local | awk '{print $1 ":6379"}') \
            $(getent hosts valkey-cluster-3.valkey-cluster.infrastructure.svc.cluster.local | awk '{print $1 ":6379"}') \
            $(getent hosts valkey-cluster-4.valkey-cluster.infrastructure.svc.cluster.local | awk '{print $1 ":6379"}') \
            $(getent hosts valkey-cluster-5.valkey-cluster.infrastructure.svc.cluster.local | awk '{print $1 ":6379"}')
